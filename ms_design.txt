2015-04-18 Zhou Kai updates:
1 now we have only three classes: TripInstruction01, TripUpdate01, and 
  PropertyNameValuePair
2 we have two configuration files: System_Manager.ini and Message.json
3 we have only two database tables: MS_TripInstruction01 and MS_TripUpdate01
4 we will have a function to parse .json file into a list of PropertyNameValuePair
   objects
5 each time when starting up the web service or the transport application, 
   the two configuration files will be read and parsed

2015-04-17 Zhou Kai updates:
1 configurable classes design
  1.1 the idea is, reduce the complexity of the class design.
    1.1.1 now we only have 2 classes:
     a) TripInstruction01
     b) TripUpdate01
    1.1.2 and the fields of the above two classes are the same:
      MsgCode + MsgSubCode + PrimeMover + HeadNo + SeqNo + MessageBody
      all of the above fields are string, among them, MessageBody is
      a compound field(and it will be resolved according to a configuration
      file --> this is the idea of configurable class)
  1.2 use a independent .json file as a configuration on how to resolve a
    message class(particular the property MessageBody)
    1.2.1 the format of the configuration file:
    [MessageBody]
    01=field_name1
    02=field_name2
    03=field_name3
    04=field_name4
    ...
    e.g:
    [MessageBodySeaExport1st]
    01=ScheduleDate
    02=TripStartTime
    03=TripEndTime
    04=Vessel
    05=Voyage
    06=BookRefNo
    07=ShippingLine
    ...
    the above configuration means the sea-export first leg instruction message body
    will be resolved into the above sequence, which is, the first value is ScheduleDate
    the second value is TripStartTime, and so on...

1 web service on ipl side(listening for tu01 messages):
  1.1 the message from gv side is: Message Head + Message body
  1.2 on receiving the above message, ipl web service is to
    resolve it into specific instructions:
    a) Message Body = 01 --> means the trip identified by
      (JN + SN) in Message Head is started
    b) Message Body = 07 --> means the trip identified by
      (JN + SN) in Message Head is completed
    c) Message Body = [02,03,04,05,06]=(text-value)~ -->
      means the Container number, Seal number, Trailer number,
      DO number, Remarks or a combination of them will be 
      updated. e.g:
      Message Head + 01 --> the trip is started
      Message Head + 02=abc~03=123~04=tral --> update the trip
        with container number = abc, seal number = 123, and
        trailer number = tral
  1.3 forward the resolved messages(instructions) to the 
    planner UI. 
  1.4 there's a sequence diagram for the above interactions.

2 implementations of the ipl web service mvc architecture 
  2.1 controllers:
    2.1.1 HomeController --> displays a home page to indicate
     the web service is running
    2.1.2 TripUpdateController --> listen to TU01 messages
      sent from GV
  2.2 model:
    2.2.1 add a class called TripUpdate01
  2.3 view: none  
